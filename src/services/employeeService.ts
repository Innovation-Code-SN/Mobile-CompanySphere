// src/services/employeeService.ts - VERSION COMPLETE
import { apiClient, ApiResponse } from "./apiConfig";

export interface Employee {
  id: string;
  matricule: string;
  nom: string;
  prenom: string;
  photo?: string;
  dateEntree: string;
  statut: 'ACTIF' | 'INACTIF' | 'SUSPENDU' | 'PLUS_EN_POSTE' | 'EN_CONGE';
  poste?: {
    id: string;
    nom: string;
    description?: string;
  };
  service?: {
    id: string;
    nom: string;
    description?: string;
  };
  contact: {
    email?: string;
    telephoneMobile?: string;
    telephoneInterne?: string;
    adresseEnEntreprise?: string;
  };
  historiquePostes?: any[];
  linkResponseDtos?: any[];
}

class EmployeeService {

  // üìã M√âTHODES EXISTANTES

  async getAll(): Promise<ApiResponse<Employee[]>> {
    try {
      const response = await apiClient.get('/api/admin/employes');
      return {
        success: true,
        data: response.data.data,
      };
    } catch (error: any) {
      return {
        success: false,
        data: [],
        message: error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des employ√©s',
      };
    }
  }

  async getById(id: string): Promise<ApiResponse<Employee>> {
    try {
      const response = await apiClient.get(`/api/admin/employes/${id}`);
      return {
        success: true,
        data: response.data.data,
      };
    } catch (error: any) {
      return {
        success: false,
        data: {} as Employee,
        message: error.response?.data?.message || 'Erreur lors de la r√©cup√©ration de l\'employ√©',
      };
    }
  }

  async getMyProfile(): Promise<ApiResponse<Employee>> {
    try {
      console.log('üîÑ R√©cup√©ration du profil utilisateur...');
      const response = await apiClient.get('/api/profile/me');

      console.log('‚úÖ Profil r√©cup√©r√©:', response.data);
      return {
        success: true,
        data: response.data,
      };
    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration profil:', error);
      return {
        success: false,
        data: {} as Employee,
        message: error.response?.data?.message || 'Erreur lors de la r√©cup√©ration du profil',
      };
    }
  }

  async updateContactInfo(id: string, contactData: any): Promise<ApiResponse<Employee>> {
    try {
      console.log('üìù Mise √† jour des contacts pour l\'employ√©:', id, contactData);
      const response = await apiClient.put(`/api/profile/${id}/contact`, contactData);

      console.log('‚úÖ Contacts mis √† jour:', response.data);
      return {
        success: true,
        data: response.data,
      };
    } catch (error: any) {
      console.error('‚ùå Erreur mise √† jour contacts:', error);
      return {
        success: false,
        data: {} as Employee,
        message: error.response?.data?.message || 'Erreur lors de la mise √† jour',
      };
    }
  }

  async getByService(serviceId: string): Promise<ApiResponse<Employee[]>> {
    try {
      console.log('üë• R√©cup√©ration employ√©s du service:', serviceId);
      const response = await apiClient.get(`/api/admin/employes/service/${serviceId}`);

      return {
        success: true,
        data: response.data.data || [],
      };
    } catch (error: any) {
      console.log('‚ùå Erreur r√©cup√©ration employ√©s service:', error.response?.data?.message);
      return {
        success: false,
        data: [],
        message: error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des employ√©s du service',
      };
    }
  }

  // üì∏ NOUVELLES M√âTHODES POUR LA GESTION DES PHOTOS

  /**
   * Met √† jour la photo de profil d'un employ√©
   * @param employeeId - ID de l'employ√©
   * @param formData - FormData contenant la nouvelle photo
   */
  async updateProfilePhoto(employeeId: string, formData: FormData): Promise<ApiResponse<{
    photoPath: string;
    photoUrl: string | null;
    message: string;
  }>> {
    try {
      console.log(`üì§ Mise √† jour photo employ√© ID: ${employeeId}`);

      // Utiliser directement apiClient qui g√®re d√©j√† les headers d'authentification
      const response = await apiClient.put(`/api/profile/${employeeId}/photo`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      console.log('‚úÖ Photo mise √† jour avec succ√®s:', response.data);

      return {
        success: true,
        data: {
          photoPath: response.data.photoPath,
          photoUrl: this.getEmployeePhotoUrl(response.data.photoPath),
          message: response.data.message || 'Photo mise √† jour avec succ√®s'
        },
        message: 'Photo mise √† jour avec succ√®s'
      };

    } catch (error: any) {
      console.error('‚ùå Erreur mise √† jour photo:', error);

      let errorMessage = 'Erreur lors de la mise √† jour de la photo';

      if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }

      return {
        success: false,
        data: {
          photoPath: '',
          photoUrl: null,
          message: errorMessage
        },
        message: errorMessage
      };
    }
  }

  /**
   * Supprime la photo de profil d'un employ√©
   * @param employeeId - ID de l'employ√©
   */
  async removeProfilePhoto(employeeId: string): Promise<ApiResponse<any>> {
    try {
      console.log(`üóëÔ∏è Suppression photo employ√© ID: ${employeeId}`);

      const response = await apiClient.delete(`/api/profile/${employeeId}/photo`);

      console.log('‚úÖ Photo supprim√©e avec succ√®s:', response.data);

      return {
        success: true,
        data: response.data,
        message: response.data.message || 'Photo supprim√©e avec succ√®s'
      };

    } catch (error: any) {
      console.error('‚ùå Erreur suppression photo:', error);

      let errorMessage = 'Erreur lors de la suppression de la photo';

      if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }

      return {
        success: false,
        data: null,
        message: errorMessage
      };
    }
  }

  /**
   * Construit l'URL compl√®te d'une photo d'employ√©
   * @param photoPath - Chemin ou nom de fichier de la photo
   * @returns URL compl√®te de la photo ou null
   */
  getEmployeePhotoUrl(photoPath: string | null | undefined): string | null {
    if (!photoPath) {
      return null;
    }

    // Si c'est d√©j√† une URL compl√®te, la retourner telle quelle
    if (photoPath.startsWith('http')) {
      return photoPath;
    }

    // Construire l'URL √† partir du nom de fichier
    // Utiliser l'endpoint d√©fini dans le contr√¥leur (/api/profile/photos/{filename})
    const baseUrl = apiClient.defaults.baseURL || process.env.EXPO_PUBLIC_API_URL || '';
    return `${baseUrl}/api/profile/photos/${photoPath}`;
  }

  /**
   * Pr√©charge une photo d'employ√© (utile pour v√©rifier si elle existe)
   * @param photoPath - Chemin de la photo
   */
  async preloadPhoto(photoPath: string): Promise<boolean> {
    try {
      if (!photoPath) return false;

      const photoUrl = this.getEmployeePhotoUrl(photoPath);
      if (!photoUrl) return false;

      // Faire une requ√™te HEAD pour v√©rifier l'existence sans t√©l√©charger
      await apiClient.head(`/api/profile/photos/${photoPath}`);
      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Photo non disponible:', photoPath);
      return false;
    }
  }

  /**
   * Valide un fichier photo avant upload
   * @param file - Fichier √† valider
   */
  validatePhotoFile(file: any): { isValid: boolean; error?: string } {
    if (!file) {
      return { isValid: false, error: 'Aucun fichier s√©lectionn√©' };
    }

    // V√©rifier le type de fichier
    if (!file.type || !file.type.startsWith('image/')) {
      return { isValid: false, error: 'Le fichier doit √™tre une image' };
    }

    // V√©rifier la taille (limite √† 5MB)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size && file.size > maxSize) {
      return { isValid: false, error: 'La taille de l\'image ne doit pas d√©passer 5MB' };
    }

    // Types d'images accept√©s
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      return {
        isValid: false,
        error: 'Format non support√©. Utilisez JPG, PNG ou WebP'
      };
    }

    return { isValid: true };
  }

  /**
   * Cr√©e un FormData pour l'upload de photo
   * @param photoUri - URI local de la photo (React Native)
   */
  createPhotoFormData(photoUri: string): FormData {
    const formData = new FormData();

    // Extraire le nom de fichier et l'extension de l'URI
    const uriParts = photoUri.split('/');
    const fileName = uriParts[uriParts.length - 1] || 'profile_photo.jpg';

    // D√©terminer le type MIME
    let mimeType = 'image/jpeg';
    if (fileName.toLowerCase().includes('.png')) {
      mimeType = 'image/png';
    } else if (fileName.toLowerCase().includes('.webp')) {
      mimeType = 'image/webp';
    }

    formData.append('photo', {
      uri: photoUri,
      type: mimeType,
      name: fileName,
    } as any);

    return formData;
  }
}

export const employeeService = new EmployeeService();