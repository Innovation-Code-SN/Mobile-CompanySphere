// meetingService.js - Version compl√®te avec r√©ponse aux invitations

import AsyncStorage from '@react-native-async-storage/async-storage';
import { Meeting } from '../types/meetings';
import { apiClient, ApiResponse } from "./apiConfig";

export const meetingService = {
    // Obtenir mes r√©unions
    getMyMeetings: async (): Promise<{ success: boolean; data: Meeting[] }> => {
        try {
            console.log('üîÑ Appel API: /api/reunions/mes-reunions');

            const response = await apiClient.get('/api/reunions/mes-reunions');
            console.log('üì• R√©ponse compl√®te:', response);
            console.log('üìä Status:', response.status);
            console.log('üíæ Data:', response.data);

            const backendResponse = response.data;

            if (backendResponse && backendResponse.success) {
                console.log('‚úÖ Succ√®s - Donn√©es brutes:', backendResponse.data);
                
                return {
                    success: true,
                    data: backendResponse.data || []
                };
            } else {
                console.warn('‚ö†Ô∏è R√©ponse sans succ√®s:', backendResponse);
                return {
                    success: false,
                    data: []
                };
            }
        } catch (error: unknown) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©unions:', error);

            if (error && typeof error === 'object' && 'response' in error) {
                const axiosError = error as any;
                console.error('üìä Status de l\'erreur:', axiosError.response?.status);
                console.error('üí¨ Message d\'erreur:', axiosError.response?.data);

                if (axiosError.response?.status === 400) {
                    console.error('‚ùå Erreur 400 - Requ√™te invalide ou utilisateur non authentifi√©');
                } else if (axiosError.response?.status === 401) {
                    console.error('‚ùå Erreur 401 - Non autoris√©');
                } else if (axiosError.response?.status === 403) {
                    console.error('‚ùå Erreur 403 - Acc√®s interdit');
                }
            }

            return {
                success: false,
                data: []
            };
        }
    },

    // üîß M√âTHODE COMPL√àTE pour r√©pondre √† une invitation
    respondToInvitation: async (
        meetingId: string | number,
        employeeId: string | number,
        status: string,
        comment?: string
    ) => {
        try {
            console.log('üîÑ R√©ponse √† l\'invitation:', { 
                meetingId, 
                employeeId, 
                status, 
                comment: comment ? 'Oui' : 'Non' 
            });

            // V√©rifier qu'on a bien un employeeId
            let finalEmployeeId = employeeId;
            if (!finalEmployeeId) {
                const userData = await AsyncStorage.getItem('user_data');
                if (userData) {
                    const user = JSON.parse(userData);
                    finalEmployeeId = user.employeId || user.id;
                }

                if (!finalEmployeeId) {
                    throw new Error('ID employ√© non trouv√©');
                }
            }

            // Pr√©parer le payload
            const payload = {
                statut: status,
                commentaire: comment || null
            };

            console.log('üì§ Payload envoy√©:', payload);

            // Appeler l'endpoint avec commentaire (nouvelle API)
            const response = await apiClient.put(
                `/api/reunions/${meetingId}/participants/employe/${finalEmployeeId}/reponse`,
                payload
            );

            console.log('‚úÖ R√©ponse invitation r√©ussie:', response.data);

            return {
                success: true,
                data: response.data.data || response.data,
                message: response.data.message || 'R√©ponse enregistr√©e avec succ√®s'
            };
        } catch (error: unknown) {
            console.error('‚ùå Erreur lors de la r√©ponse:', error);
            
            let errorMessage = 'Erreur lors de l\'enregistrement de la r√©ponse';
            
            if (error && typeof error === 'object' && 'response' in error) {
                const axiosError = error as any;
                console.error('üìä Status de l\'erreur:', axiosError.response?.status);
                console.error('üí¨ D√©tail de l\'erreur:', axiosError.response?.data);
                
                if (axiosError.response?.data?.message) {
                    errorMessage = axiosError.response.data.message;
                } else if (axiosError.response?.status === 404) {
                    errorMessage = 'R√©union ou participant non trouv√©';
                } else if (axiosError.response?.status === 400) {
                    errorMessage = 'Donn√©es invalides';
                } else if (axiosError.response?.status === 403) {
                    errorMessage = 'Vous n\'√™tes pas autoris√© √† r√©pondre √† cette invitation';
                }
            }

            return {
                success: false,
                error: errorMessage
            };
        }
    },

    // M√©thode alternative pour les r√©ponses rapides (sans commentaire)
    quickResponse: async (
        meetingId: string | number,
        employeeId: string | number,
        status: string
    ) => {
        return await meetingService.respondToInvitation(meetingId, employeeId, status);
    },

    // M√©thode de test pour v√©rifier la connexion
    testConnection: async () => {
        try {
            console.log('üß™ Test de connexion API...');

            const token = await AsyncStorage.getItem('auth_token');
            const userData = await AsyncStorage.getItem('user_data');

            console.log('üîë Token pr√©sent:', !!token);
            console.log('üë§ User data pr√©sent:', !!userData);

            if (userData) {
                const user = JSON.parse(userData);
                console.log('üë§ User:', user.username || user.displayName);
                console.log('üÜî Employee ID:', user.employeId);
            }

            const response = await apiClient.get('/api/reunions');
            console.log('‚úÖ Test connexion r√©ussi:', response.status);

            return { success: true, message: 'Connexion OK' };
        } catch (error: any) {
            console.error('‚ùå Test connexion √©chou√©:', error.response?.status, error.response?.data);
            return {
                success: false,
                message: `Erreur ${error.response?.status}: ${error.response?.data?.message || 'Connexion √©chou√©e'}`
            };
        }
    },

    // Obtenir les d√©tails d'une r√©union sp√©cifique
    getMeetingDetails: async (meetingId: string | number) => {
        try {
            console.log('üîÑ R√©cup√©ration des d√©tails de la r√©union:', meetingId);

            const response = await apiClient.get(`/api/reunions/${meetingId}`);
            console.log('‚úÖ D√©tails r√©union r√©cup√©r√©s:', response.data);

            if (response.data && response.data.success) {
                return {
                    success: true,
                    data: response.data.data
                };
            } else {
                return {
                    success: false,
                    error: response.data?.message || 'Erreur lors de la r√©cup√©ration des d√©tails'
                };
            }
        } catch (error: any) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©tails:', error);
            return {
                success: false,
                error: error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des d√©tails'
            };
        }
    },

    // Obtenir les participants d'une r√©union
    getMeetingParticipants: async (meetingId: string | number) => {
        try {
            console.log('üîÑ R√©cup√©ration des participants de la r√©union:', meetingId);

            const response = await apiClient.get(`/api/reunions/${meetingId}/participants`);
            console.log('‚úÖ Participants r√©cup√©r√©s:', response.data);

            if (response.data && response.data.success) {
                return {
                    success: true,
                    data: response.data.data || response.data.participants
                };
            } else {
                return {
                    success: false,
                    error: response.data?.message || 'Erreur lors de la r√©cup√©ration des participants'
                };
            }
        } catch (error: any) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des participants:', error);
            return {
                success: false,
                error: error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des participants'
            };
        }
    }
};